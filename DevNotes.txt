Рекомендации ревьюэра - СПРИНТ 13
ИСПРАВЛЕНО:
  === Корректным считается запуск сервиса после подключения основных мидлвар. Сейчас же они "навешиваются" после того как мы вызовем listen
  === Переносы строки можно зафиксировать например на уровне конфигурации git при помощи autoCRLF в .gitattributes для избежания подобных проблем.
  === Указать описание проекта в поле description файла package.json
  === Указать автора работы (т.е вас) в поле author файла package.json.
  === Пакеты eslint-config-airbnb-base, eslint-plugin-import, nodemon относятся к devDependencies поскольку их наличие не требуется для непосредственного
    запуска проекта в production.

Сделать после того, как будет пройден материал тренажера об обработке ошибок в общем catch:
  === Реализовать общий .catch-блок, который навешивать при помощи обертки на переданную функцию.
  === Теперь по коду который размещаен у вас в helpers - указанные вами ошибки могут быть указаны в качестве второго параметра валидации на уровне
    схемы Mongoose тогда у вас отпадет необходимость итерироваться по объекту с ошибками и соотносить ошибку определенного поля со словарем -
    достаточно будет для ошибок валидации возвращать просто err.message, соответственно также отпадает необходимость в тяжеловестном joinErrorMessages.
    Глубого его не анализировал (ибо в целом можно его исключить см выше), но на первый взгляд можно упростить его флоу если использовать метод filter :)
  ===  isUserExistent - с точки зрения логики может быть оформлена в виде мидлвары, тогда код самого контроллера станет легче.
    isObjectIdValid - также может быть реализован в виде мидлвары либо при помощи вынесения обработчика CastError в .catch-блок.
    Тем самым мы делаем контроллер чище.
  ===  orFail – работает с другими методами update-группы, которые можно использовать вместо findOneAndUpdate.
  ===  В случае когда ваш код состоит из последовательности асинхронных вызовов в ряде случаев удобно использовать синтаксис async\await позволяющий
    писать асинхронный код в псевдосинхронном стиле.
  ===  Использование "захардкоженных" статус-кодов в блоке .catch является плохой практикой поскольку может маскировать реальную проблему (код определяется
    вне зависимости от типа выброшенной ошибки), а также делает в ряде случаев статус-коды нерелеватными. Для решения данной проблемы рекомендую проверять
    тип ошибки при помощи поля name или с использованием конструкции instanceof
  ===  В случае если в метод удаления карточки \ простановки или снятия лайка \ запроса пользователя по ID передан некорректный по форме ID сервис возвращает
    не слишком информативную ошибку со статус-кодом 500, вместо более подходящей 400й (фактически это ошибка валидации). Для этого в .catch-блоке
    достаточно обрабатывать ошибку с именем CastError.

Сделать по окончании работы:
  === Убрать закомменченные строки.

Проектная работа 14
ГОТОВО  1. Добавьте email и password к схеме пользователя
ГОТОВО  2. Переработайте контроллер createUser
        3. Создайте контроллер login